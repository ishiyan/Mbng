import { } from 'jasmine';

import { HilbertTransformerHomodyneDiscriminatorUnrolled } from './hilbert-transformer-homodyne-discriminator-unrolled';

// ng test mb  --code-coverage --include='**/indicators/**/*.spec.ts'
// ng test mb  --code-coverage --include='**/indicators/john-ehlers/hilbert-transformer/*.spec.ts'

/* eslint-disable max-len */
// Input sata taken from TA-Lib (http://ta-lib.org/) tests,
//    test_ht_hd.xsl (price, D5 … D256, 252 entries).
const input = [
  92.0, 93.1725, 95.3125, 94.845, 94.4075, 94.11, 93.5, 91.735, 90.955, 91.6875,
  94.5, 97.97, 97.5775, 90.7825, 89.0325, 92.095, 91.155, 89.7175, 90.61, 91.0,
  88.9225, 87.515, 86.4375, 83.89, 83.0025, 82.8125, 82.845, 86.735, 86.86, 87.5475,
  85.78, 86.1725, 86.4375, 87.25, 88.9375, 88.205, 85.8125, 84.595, 83.6575, 84.455,
  83.5, 86.7825, 88.1725, 89.265, 90.86, 90.7825, 91.86, 90.36, 89.86, 90.9225,
  89.5, 87.6725, 86.5, 84.2825, 82.9075, 84.25, 85.6875, 86.61, 88.2825, 89.5325,
  89.5, 88.095, 90.625, 92.235, 91.6725, 92.5925, 93.015, 91.1725, 90.985, 90.3775,
  88.25, 86.9075, 84.0925, 83.1875, 84.2525, 97.86, 99.875, 103.265, 105.9375, 103.5,
  103.11, 103.61, 104.64, 106.815, 104.9525, 105.5, 107.14, 109.735, 109.845, 110.985,
  120.0, 119.875, 117.9075, 119.4075, 117.9525, 117.22, 115.6425, 113.11, 111.75, 114.5175,
  114.745, 115.47, 112.53, 112.03, 113.435, 114.22, 119.595, 117.965, 118.715, 115.03,
  114.53, 115.0, 116.53, 120.185, 120.5, 120.595, 124.185, 125.375, 122.97, 123.0,
  124.435, 123.44, 124.03, 128.185, 129.655, 130.875, 132.345, 132.065, 133.815, 135.66,
  137.035, 137.47, 137.345, 136.315, 136.44, 136.285, 129.095, 128.31, 126.0, 124.03,
  123.935, 125.03, 127.25, 125.62, 125.53, 123.905, 120.655, 119.965, 120.78, 124.0,
  122.78, 120.72, 121.78, 122.405, 123.25, 126.185, 127.56, 126.565, 123.06, 122.715,
  123.59, 122.31, 122.465, 123.965, 123.97, 124.155, 124.435, 127.0, 125.5, 128.875,
  130.535, 132.315, 134.065, 136.035, 133.78, 132.75, 133.47, 130.97, 127.595, 128.44,
  127.94, 125.81, 124.625, 122.72, 124.09, 123.22, 121.405, 120.935, 118.28, 118.375,
  121.155, 120.905, 117.125, 113.06, 114.905, 112.435, 107.935, 105.97, 106.37, 106.845,
  106.97, 110.03, 91.0, 93.56, 93.62, 95.31, 94.185, 94.78, 97.625, 97.59,
  95.25, 94.72, 92.22, 91.565, 92.22, 93.81, 95.59, 96.185, 94.625, 95.12,
  94.0, 93.745, 95.905, 101.745, 106.44, 107.935, 103.405, 105.06, 104.155, 103.31,
  103.345, 104.84, 110.405, 114.5, 117.315, 118.25, 117.185, 109.75, 109.655, 108.53,
  106.22, 107.72, 109.84, 109.095, 109.09, 109.155, 109.315, 109.06, 109.905, 109.625,
  109.53, 108.0600
];

// Expected smoothed data is taken from TA-Lib (http://ta-lib.org/) tests,
// test_ht_hd.xsl model (smooth, E5 … E256, 252 entries).
const expectedSmoothed = [
  Number.NaN, Number.NaN, Number.NaN, 94.36625, 94.59625,
  94.4665, 93.999, 93.00675, 92.0135, 91.6585,
  92.67075, 94.971, 96.49075, 94.63025, 92.16025,
  91.462, 90.97525, 90.55575, 90.59975, 90.642,
  89.96275, 88.94375, 87.714, 85.8825, 84.407,
  83.4475, 82.97125, 84.41025, 85.61475, 86.7085,
  86.62175, 86.3985, 86.3375, 86.64375, 87.65475,
  88.057, 87.299, 86.1165, 84.8245, 84.3795,
  83.9275, 85.01975, 86.44925, 87.86425, 89.43625,
  90.24125, 91.07725, 90.9445, 90.50225, 90.585,
  90.08475, 89.0895, 87.894, 86.1475, 84.515,
  84.07875, 84.55975, 85.491, 86.8585, 88.1885,
  88.97725, 88.82275, 89.53175, 90.6505, 91.274,
  92.04825, 92.54175, 92.05925, 91.608, 90.9825,
  89.7275, 88.412, 86.397, 84.70925, 84.1665,
  89.4665, 94.47725, 99.26575, 103.1155, 103.82175,
  103.808, 103.67075, 103.911, 105.151, 105.3145,
  105.51275, 106.178, 107.63125, 108.8365, 110.0085,
  114.238, 117.1315, 118.224, 119.11025, 118.57225,
  117.946, 116.95425, 115.176, 113.4835, 113.51825,
  113.91425, 114.690, 114.05375, 113.1395, 113.036,
  113.3775, 115.994, 117.252, 118.2165, 117.179,
  115.8605, 115.2365, 115.521, 117.486, 119.0615,
  120.078, 121.971, 123.5745, 123.697, 123.5845,
  123.8055, 123.6035, 123.831, 125.6145, 127.4675,
  129.2865, 130.950, 131.670, 132.702, 134.056,
  135.4815, 136.612, 137.152, 136.927, 136.6865,
  136.4435, 133.443, 130.9535, 128.3405, 125.9835,
  124.814, 124.5985, 125.599, 125.8225, 125.851,
  125.070, 123.1015, 121.5165, 120.823, 121.8925,
  122.4645, 122.000, 121.884, 121.918, 122.4495,
  124.108, 125.770, 126.456, 125.324, 124.073,
  123.519, 122.850, 122.6685, 123.1465, 123.5015,
  123.8925, 124.211, 125.3585, 125.6025, 127.0435,
  128.6765, 130.4115, 132.315, 134.150, 134.367,
  133.8475, 133.5725, 132.357, 130.298, 129.1955,
  128.324, 127.1535, 126.025, 124.4315, 123.958,
  123.5215, 122.618, 121.8485, 120.1955, 119.1615,
  119.724, 120.2115, 119.190, 116.658, 115.3955,
  113.770, 111.1915, 108.746, 107.1695, 106.6365,
  106.7125, 108.109, 101.4875, 97.427, 94.719,
  94.022, 94.347, 94.5915, 95.852, 96.698,
  96.380, 95.7435, 94.113, 92.761, 92.2735,
  92.725, 93.9795, 95.135, 95.2045, 95.2315,
  94.6795, 94.1845, 94.7975, 97.6185, 101.655,
  105.0455, 105.205, 105.2765, 104.6545, 103.923,
  103.668, 104.017, 106.614, 110.224, 113.841,
  116.435, 117.262, 114.437, 112.049, 109.977,
  107.953, 107.6255, 108.349, 108.756, 109.1045,
  109.192, 109.200, 109.1585, 109.4585, 109.565,
  109.5865, 108.998500
];

// Expected detrended data is taken from TA-Lib (http://ta-lib.org/) tests,
// test_ht_hd_tl.xsl model (detrender, F5 … F256, 252 entries).
const expectedDetrended = [
  Number.NaN, Number.NaN, Number.NaN, 8.9872529175000, 9.0091576575000,
  62.8922912557500, 62.9791276207500, 9.32026150012499, 8.72833094955000, -1.18487042824499,
  -1.50107340048300, -0.865548764656653, 0.774553207328332, 2.73425135915793, 3.10719600483979,
  -0.320438183480193, -4.20971694786669, -3.76607919981557, -2.19840953444192, -1.66730405611637,
  -0.824216643446561, -0.389720850576693, -1.44032300054316, -3.09190726835819, -4.14005072156989,
  -5.43783089745035, -5.80420011549713, -4.24476734097920, -2.46885943954737, 1.58710671977183,
  4.43981858459690, 4.09313796580003, 2.22579638727991, 0.0853789344010629, 0.0761496596275142,
  0.656270359407978, 1.97596326645869, 1.80442306972465, -0.766838331611506, -2.83984842772889,
  -3.74697339934701, -2.68826283652387, -1.23064642254623, 1.09946840528635, 3.91972422308773,
  4.57846163358676, 4.91688320830916, 3.81997889869049, 2.55676637716418, 1.26507167176780,
  -0.502884435201527, -0.576171417368225, -0.961036856659571, -2.27638430534806, -3.13716623486099,
  -3.98079947738033, -4.26583247323698, -2.63959640039743, -0.126926191040351, 1.76433489230392,
  3.10091823508968, 3.56487192559447, 3.00083561141979, 1.51806394525404, 1.31280489765731,
  2.50935714439499, 2.35255338597973, 1.92841612829923, 1.60036265582390, 0.0663430106110184,
  -1.21377249429583, -1.76687971650801, -3.13318310164546, -4.15128566296215, -5.08219214506417,
  -4.50751700586996, -1.65504949371185, 7.60380811494012, 15.28911596036860, 14.88477549627070,
  12.99886906351420, 7.19915926099098, 2.38351083241801, 0.929522102115013, 0.517735865490535,
  1.85518088811070, 1.83829239536756, 1.04306155568002, 1.74675295275361, 3.09896531604222,
  4.46274347582128, 4.71023535541215, 8.22206979394878, 10.20471942482790, 6.45067137892342,
  3.88610429720727, 0.969913506983747, -1.82963426900828, -2.98641863998011, -4.61916641640855,
  -5.25745083982017, -2.72176646217929, -0.0660925204025718, 1.04039032886564, 0.0801726581327027,
  -1.91662698969654, -0.801304424870248, 0.779642177132821, 4.25230033030034, 5.28350296383388,
  3.10502321031030, 0.271159173305462, -2.79324779318748, -2.21668023651026, -0.234873762110772,
  3.19066742289005, 5.20999393848774, 4.59373390141711, 5.07623775499030, 5.52166161646234,
  3.18346552831830, 0.775849430737889, 0.521996240436295, 0.425657917764851, 0.737618654408631,
  3.24552740845475, 5.31574324639712, 5.63785437853044, 5.76387266052843, 4.63860064871392,
  4.01639198580676, 5.04837026370218, 5.48653081543948, 4.79457953146280, 3.23349400610759,
  1.01449886376103, -1.18833174543853, -2.17786864601495, -7.34513291852914, -11.50426011352260,
  -11.37221338511770, -11.33559485984170, -7.74619267543083, -3.59741713526470, 0.63099180612244,
  1.78298570503918, -0.0528481469618636, -1.88843174477108, -5.01597392573878, -5.83342657377768,
  -3.92922937752374, -0.186838434765071, 1.95607761821063, 0.234723609336024, -0.413095482341137,
  0.382667451736046, 1.49862889415607, 4.02155722687378, 5.33120420836294, 3.61850994475616,
  -0.35289594825326, -3.46092056067680, -3.18921954436038, -2.49325013638114, -1.59946761080849,
  0.361216745072252, 1.28701295443815, 1.55559487384262, 1.53303420008103, 2.57255681225572,
  2.62870085569429, 3.13397071228133, 4.85862146022901, 5.14708489427225, 5.30680757348722,
  5.04382996210236, 2.99916871645245, 0.0236319135853506, -1.28708550920351, -2.71738883445928,
  -5.02798528811439, -5.03676785247540, -3.88604064591759, -4.08252818775635, -4.04110378590922,
  -4.40039573137898, -3.62218844045606, -2.13018013334558, -2.72853159066207, -3.04893739344158,
  -3.81053374031141, -4.06902280248562, -1.37278934716961, 0.254456564908407, -1.94767628533836,
  -6.78718331682070, -8.15194602296862, -8.10019390801706, -11.33153249871230, -11.55092444836040,
  -8.92673363548058, -4.71709009204003, -3.18121994360306, -0.602707079508482, -10.05426111933760,
  -16.75228621791540, -11.36608161740570, -7.69128618504172, -1.92020294611357, 0.707334646297963,
  3.03978872650678, 4.41680905312702, 0.859014413701501, -2.16944309441368, -4.94188633543843,
  -6.20700437333476, -3.70132242074857, -0.216676273927173, 2.81825540058030, 4.03015489676071,
  2.25939281328576, 0.463864623249423, -0.527122462586793, -0.864586223978216, 1.63986141262330,
  6.85043506002733, 11.27655864736460, 11.91772714034700, 6.82845339282070, 1.81455653743714,
  -0.327703307880563, -2.51142625160202, -1.28074066811762, 1.48166065755279, 6.83496943904234,
  12.29335145847880, 14.03376432173650, 11.76231007817030, 6.36898977425706, -2.99161050039115,
  -9.14966540170821, -8.53172032731284, -7.61738045385190, -4.27219556885827, -0.120668295404029,
  1.28701281691344, 1.21839253427298, 0.838648434314422, 0.325818349369284, 0.113969963319837,
  0.372781084692038, 0.40559600219908,
];

// Expected quadrature data is taken from TA-Lib (http://ta-lib.org/) tests,
// test_ht_hd_tl.xsl model (Q1, G5 … G256, 252 entries).
const expectedQuadrature = [
  Number.NaN, Number.NaN, Number.NaN, 0.855927993356865, 0.858014156984985,
  11.1226347806398, 11.1434153784306, 33.1142306757262, 32.8062895779834, -34.2628281943790,
  -36.4457785394292, -14.4725429060892, -14.8752325935460, -0.594368707565905, 1.08163370103997,
  3.21191138405851, 1.71644163814649, -3.41291532315777, -7.92464724787348, -4.43497195796719,
  1.50607267371026, 2.43779146460479, 2.23947875152554, 1.73469635325904, -1.18581800238647,
  -4.25093663922334, -4.58090657328628, -3.97577830705054, -2.53778253663147, 2.84586883531416,
  7.02347777802915, 10.8861230232300, 11.7052379430424, 4.41376906994538, -2.43675590086246,
  -5.81140549865358, -3.53762913951195, 0.249936816366064, 1.76659329560857, 0.809002729224447,
  -4.09103399086359, -6.23333019911698, -4.16437919056855, 0.0401603923425658, 3.92812429899796,
  6.01932747876865, 7.7591353049801, 5.18143806518233, 1.79738056675322, -0.799174449604732,
  -3.33661929425683, -3.56682961288299, -4.09399754549751, -2.83413751241676, -1.38469260666944,
  -2.5454760890404, -2.78113427076003, -2.02607326491503, -0.98186385846887, 2.02850582830166,
  5.27797211699404, 5.7860276422967, 4.5193878208020, 2.5329684849236, 0.142384013192106,
  -1.95211979228278, -1.82516727520038, 0.715060006979592, 0.799416969875069, -0.822783483223092,
  -1.19530761185683, -2.70332223657632, -4.02158101434879, -3.11338826530719, -3.37273306595388,
  -3.5862697912351, -2.32713075465888, 1.39679273990094, 7.58598007470388, 17.5202398178045,
  21.7775470129387, 9.59917697735426, -1.70094139331706, -9.84900959965207, -14.4163559888290,
  -8.88766855049639, -3.80886086039557, -0.102952439435337, 1.25899710631473, -0.476571628287014,
  0.609490910130018, 2.76409564684112, 4.19469719141599, 3.54455169670085, 5.22510210240912,
  6.62019171404484, -2.84952383793055, -9.09597034418764, -9.1134169199047, -10.2148201454162,
  -7.31366631380089, -4.81280173622443, -3.05219500231647, 2.97053741068114, 7.04712331791934,
  5.12995214653134, 1.06213522465482, -2.78133371852436, -0.187888250347587, 3.95420177678643,
  6.40719482727042, 5.57054232367856, -1.69718961277596, -6.41893916460208, -7.86075190953845,
  -3.31198040061866, 3.32449971744085, 7.06889624495551, 8.02756916242835, 3.29512786711032,
  0.551762507613595, 0.681588095641858, -3.33464127808794, -6.44791649349957, -3.81631812038157,
  -0.799643366509021, 0.628907380012523, 4.07982118131883, 6.33361436702288, 3.78665473615762,
  1.29382896273133, -0.977646717931588, -2.47301652148446, 0.37594131404506, 1.45157122041508,
  -1.22077519109172, -4.60465786878931, -7.60777054441535, -10.2263972446652, -9.29519426709912,
  -13.7969792194521, -18.5833472655321, -8.20462196428375, -0.109256490633142, 8.45501845525402,
  16.5606901050039, 16.1617853964896, 10.3720044687360, -0.323325794860436, -5.6053458859999,
  -7.90978168063863, -5.87384866566135, 1.93331661517267, 8.07382074869962, 8.88612737690198,
  1.94116961880012, -1.96478539796873, 1.16504848164629, 3.38773034724125, 5.61771158983562,
  5.06633969778975, -1.39353602473123, -8.87995480427041, -11.4709082857312, -5.5310885941625,
  0.575593303183401, 2.52846391345203, 4.93144178171995, 4.69843040972786, 2.47927695331917,
  1.10896798915647, 1.67246091046829, 1.85682046699541, 1.23545367358066, 2.97514669920631,
  2.51018011450836, 0.533207256749376, -0.670527036201896, -3.7928886619418, -7.42678844558002,
  -7.05626209907513, -5.20660956095194, -5.87735765622913, -3.64617943717568, 0.82201895413307,
  0.808055123736997, 0.0952296786175301, 0.198006330872842, 0.722152619132241, 2.91843910043223,
  1.13529807838677, -1.08479482518601, -0.930310186391292, -0.858603050081683, 3.74811472172704,
  5.64021766392183, -2.02939477563566, -13.0176784190797, -14.3548733057880, -5.66165957161537,
  -7.08823729446843, -4.7974901120556, 4.95720273139486, 11.7410752857898, 8.20531597011912,
  4.25445053180659, -9.37014100711369, -22.6230053112365, -1.61250412540437, 14.6531362444118,
  19.8379535523459, 22.0117262903018, 12.2947228456072, 7.97392329630181, -4.6328565892902,
  -13.1789737250570, -11.4437759645248, -7.58174858520786, 2.33948714858062, 10.0314312242962,
  10.7264537101775, 7.31428324634381, -0.0400896223814751, -5.01965004665468, -4.09815661747972,
  -1.15940191924281, 4.8059510880655, 12.3652707912733, 14.2825863639924, 7.80283863443487,
  -7.28580805959545, -19.2091135281576, -15.7635571648698, -9.78017211736507, -1.45304367850065,
  8.50909791922158, 15.5366283900772, 19.5213773273585, 12.4727647223415, -1.87339740268066,
  -15.2576046240256, -26.2276353308989, -26.1028633207885, -10.6375612306116, 0.571698658695966,
  6.40288398255792, 11.6669544301862, 8.63556902693533, 3.09381531978735, 0.318119758543485,
  -0.89136299286429, -0.944707302537614,
];

// Expected in-phase data is taken from TA-Lib (http://ta-lib.org/) tests,
// test_ht_hd_tl.xsl model (I1, H5 … H256, 252 entries).
const expectedInPhase = [
  Number.NaN, Number.NaN, Number.NaN, 0.0000000000000, 0.0000000000000,
  0.0000000000000, 8.9872529175000, 9.0091576575000, 62.8922912557500, 62.9791276207500,
  9.32026150012499, 8.7283309495500, -1.18487042824499, -1.5010734004830, -0.865548764656653,
  0.774553207328332, 2.73425135915793, 3.10719600483979, -0.320438183480193, -4.20971694786669,
  -3.76607919981557, -2.19840953444192, -1.66730405611637, -0.824216643446561, -0.389720850576693,
  -1.44032300054316, -3.09190726835819, -4.14005072156989, -5.43783089745035, -5.80420011549713,
  -4.2447673409792, -2.46885943954737, 1.58710671977183, 4.4398185845969, 4.09313796580003,
  2.22579638727991, 0.0853789344010629, 0.0761496596275142, 0.656270359407978, 1.97596326645869,
  1.80442306972465, -0.766838331611506, -2.83984842772889, -3.74697339934701, -2.68826283652387,
  -1.23064642254623, 1.09946840528635, 3.91972422308773, 4.57846163358676, 4.91688320830916,
  3.81997889869049, 2.55676637716418, 1.2650716717678, -0.502884435201527, -0.576171417368225,
  -0.961036856659571, -2.27638430534806, -3.13716623486099, -3.98079947738033, -4.26583247323698,
  -2.63959640039743, -0.126926191040351, 1.76433489230392, 3.10091823508968, 3.56487192559447,
  3.00083561141979, 1.51806394525404, 1.31280489765731, 2.50935714439499, 2.35255338597973,
  1.92841612829923, 1.6003626558239, 0.0663430106110184, -1.21377249429583, -1.76687971650801,
  -3.13318310164546, -4.15128566296215, -5.08219214506417, -4.50751700586996, -1.65504949371185,
  7.60380811494012, 15.2891159603686, 14.8847754962707, 12.9988690635142, 7.19915926099098,
  2.38351083241801, 0.929522102115013, 0.517735865490535, 1.8551808881107, 1.83829239536756,
  1.04306155568002, 1.74675295275361, 3.09896531604222, 4.46274347582128, 4.71023535541215,
  8.22206979394878, 10.2047194248279, 6.45067137892342, 3.88610429720727, 0.969913506983747,
  -1.82963426900828, -2.98641863998011, -4.61916641640855, -5.25745083982017, -2.72176646217929,
  -0.0660925204025718, 1.04039032886564, 0.0801726581327027, -1.91662698969654, -0.801304424870248,
  0.779642177132821, 4.25230033030034, 5.28350296383388, 3.1050232103103, 0.271159173305462,
  -2.79324779318748, -2.21668023651026, -0.234873762110772, 3.19066742289005, 5.20999393848774,
  4.59373390141711, 5.0762377549903, 5.52166161646234, 3.1834655283183, 0.775849430737889,
  0.521996240436295, 0.425657917764851, 0.737618654408631, 3.24552740845475, 5.31574324639712,
  5.63785437853044, 5.76387266052843, 4.63860064871392, 4.01639198580676, 5.04837026370218,
  5.48653081543948, 4.7945795314628, 3.23349400610759, 1.01449886376103, -1.18833174543853,
  -2.17786864601495, -7.34513291852914, -11.5042601135226, -11.3722133851177, -11.3355948598417,
  -7.74619267543083, -3.5974171352647, 0.63099180612244, 1.78298570503918, -0.0528481469618636,
  -1.88843174477108, -5.01597392573878, -5.83342657377768, -3.92922937752374, -0.186838434765071,
  1.95607761821063, 0.234723609336024, -0.413095482341137, 0.382667451736046, 1.49862889415607,
  4.02155722687378, 5.33120420836294, 3.61850994475616, -0.35289594825326, -3.4609205606768,
  -3.18921954436038, -2.49325013638114, -1.59946761080849, 0.361216745072252, 1.28701295443815,
  1.55559487384262, 1.53303420008103, 2.57255681225572, 2.62870085569429, 3.13397071228133,
  4.85862146022901, 5.14708489427225, 5.30680757348722, 5.04382996210236, 2.99916871645245,
  0.0236319135853506, -1.28708550920351, -2.71738883445928, -5.02798528811439, -5.0367678524754,
  -3.88604064591759, -4.08252818775635, -4.04110378590922, -4.40039573137898, -3.62218844045606,
  -2.13018013334558, -2.72853159066207, -3.04893739344158, -3.81053374031141, -4.06902280248562,
  -1.37278934716961, 0.254456564908407, -1.94767628533836, -6.7871833168207, -8.15194602296862,
  -8.10019390801706, -11.3315324987123, -11.5509244483604, -8.92673363548058, -4.71709009204003,
  -3.18121994360306, -0.602707079508482, -10.0542611193376, -16.7522862179154, -11.3660816174057,
  -7.69128618504172, -1.92020294611357, 0.707334646297963, 3.03978872650678, 4.41680905312702,
  0.859014413701501, -2.16944309441368, -4.94188633543843, -6.20700437333476, -3.70132242074857,
  -0.216676273927173, 2.8182554005803, 4.03015489676071, 2.25939281328576, 0.463864623249423,
  -0.527122462586793, -0.864586223978216, 1.6398614126233, 6.85043506002733, 11.2765586473646,
  11.9177271403470, 6.8284533928207, 1.81455653743714, -0.327703307880563, -2.51142625160202,
  -1.28074066811762, 1.48166065755279, 6.83496943904234, 12.2933514584788, 14.0337643217365,
  11.7623100781703, 6.36898977425706, -2.99161050039115, -9.14966540170821, -8.53172032731284,
  -7.6173804538519, -4.27219556885827, -0.120668295404029, 1.28701281691344, 1.21839253427298,
  0.838648434314422, 0.325818349369284,
];

// Expected period data is taken from TA-Lib (http://ta-lib.org/) tests,
// test_ht_hd_tl.xsl model (period adjustment, X5 … X256, 252 entries).
const expectedPeriod = [
  Number.NaN, Number.NaN, Number.NaN, 6.000000000000, 6.000000000000,
  6.000000000000, 6.600000000000, 6.480000000000, 7.128000000000, 7.840800000000,
  8.624880000000, 9.48736800000001, 10.436104800000, 11.479715280000, 12.627686808000,
  13.890455488800, 15.0926329924722, 16.2433119915974, 17.3240836904034, 18.4750042455517,
  19.7939289386917, 20.9911507915626, 21.6433520220395, 21.9597055194242, 22.295567484037,
  22.7913256827455, 23.5445766145902, 24.7521477316057, 26.1318113936822, 26.8589045943822,
  26.7029584095779, 25.6008602433752, 24.4010235487785, 24.2692315868529, 25.0637725256069,
  24.7319353371325, 23.3248938845132, 21.9476999922623, 21.1143488973992, 20.7713517378371,
  20.4942338516044, 20.1830566507055, 20.0739507302228, 20.3293248515995, 20.4866821775476,
  19.9913201292844, 19.0372146548908, 18.3053382893646, 18.0720770747252, 17.6954108006825,
  16.9434093014034, 16.2220254780812, 15.7204121020446, 15.5353482925537, 15.6472250383036,
  15.7267243151154, 15.6590281527556, 15.7319262721526, 16.0668724507697, 16.3531322831524,
  16.4174885146154, 16.3274780420595, 16.2746574445002, 16.3060494240206, 16.2672292425895,
  16.0694145402115, 15.804303177834, 15.7171556094496, 15.9053845783687, 16.3414164558469,
  17.0623857188493, 17.7260970224479, 18.074288402433, 18.494521449266, 19.137157817464,
  19.3919622568003, 19.5603922200286, 19.7770944801923, 19.2907516233715, 18.017562016229,
  16.8284029231579, 17.1147781093319, 18.6713078359499, 18.2761965984744, 17.1311084997374,
  16.4206991301335, 16.3842573842542, 16.7612848124631, 17.2573299294506, 17.6745939864345,
  18.0306626992209, 18.4441790309482, 18.8979995955475, 19.3779438043391, 19.9974973669499,
  20.7790942762302, 21.1738486404185, 21.4578286545753, 21.6342419875333, 21.4075954349216,
  21.3843576146348, 21.6660029257352, 21.6954406854302, 21.3606323359841, 20.9435708601481,
  20.4025357513593, 19.8873729721081, 19.7099709979658, 19.649125076619, 19.4432320410941,
  19.2438276187454, 19.313747204284, 19.7149137797632, 20.1342916662289, 19.783181020847,
  19.2096906416704, 19.460010571864, 20.2574332119128, 21.0748174537638, 22.0308675272609,
  22.7912910089154, 21.6166075631449, 20.1899114639773, 18.8573773073548, 18.1258315385623,
  18.2475922288203, 18.7715534746318, 19.648253936845, 21.0783724134285, 22.857039083933,
  25.1427429923264, 26.0497983607984, 25.0821689572202, 24.8063861060214, 25.6794813741695,
  26.8996472780441, 28.0714619275514, 28.8208961726656, 29.1488408978741, 29.9116417258938,
  30.5223010954924, 29.8317081333416, 29.9075653471379, 32.2289911903747, 31.2525061651841,
  29.1898407582819, 27.2633112682353, 25.4937906494851, 24.8331357198822, 24.7401252924293,
  24.5673021821238, 24.2283161983407, 23.8971330732361, 23.6704420106472, 23.5687228053517,
  23.8166262117883, 24.4892936892539, 24.4411970402426, 23.6903630293282, 23.2723372938103,
  23.6506899584188, 24.5413731350155, 25.266648506194, 24.8224337919593, 24.1379212432432,
  24.1640858984258, 23.6794478016085, 22.3569670009471, 20.9009375648173, 19.7487758338471,
  18.9294170880801, 18.1747497820483, 17.4088777286446, 16.8491949330705, 16.7218205897106,
  16.9654950521729, 17.718617550863, 19.1053368813236, 19.9096584474448, 19.9372740805809,
  20.0129142574269, 20.5841739641282, 20.8519195549087, 20.6284026448095, 20.5256570626317,
  20.5344043712421, 20.2334522446595, 20.0748716763842, 20.414790876648, 20.9503099867908,
  21.8351184531871, 23.2160966646832, 24.6811244880279, 26.5336805524857, 28.0305085202962,
  28.9120199350506, 31.8032219285557, 34.9835441214113, 32.6746302093981, 30.5181046155779,
  28.5039097109497, 28.2305012927653, 26.3672882074428, 24.6270471857516, 23.0826743964174,
  22.5484432797173, 24.2116466876331, 26.6328113563964, 29.2960924920361, 32.2257017412397,
  35.4482719153636, 33.4020350637593, 32.6019965121414, 32.6840602571333, 32.1569472684237,
  30.9933317991663, 29.2286856332057, 27.2995923814141, 25.8071820561401, 24.9109908158245,
  24.3433866080433, 24.1510183122509, 24.374269517606, 24.5520015761806, 24.0251179136095,
  23.0605881155289, 22.4921395899278, 23.1867827198293, 25.5054609918123, 28.0560070909935,
  30.8616078000929, 32.1862532400042, 30.061960526164, 28.0778711314371, 27.0590214340061,
  26.9641205716381, 27.0012383437456, 26.8166314262667, 26.7067343709919, 26.9360338486944,
  26.057711959547, 24.3379029702169, 22.7316013741826, 22.1551293209485, 22.5574297539238,
  22.0280685639899, 20.8247996235434, 19.6448518487839, 18.7762154291721, 18.2244985413356,
  17.8489494367391, 17.5380938201092,
];

describe('HilbertTransformerHomodyneDiscriminatorUnrolled', () => {
  const epsilon = 1e-8;

  it('should throw if the smoothing length is less than 2', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 1, alphaEmaQuadratureInPhase: 0.2, alphaEmaPeriod: 0.2 }
      );
    }).toThrow();
  });

  it('should throw if the smoothing length is greater than 4', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 5, alphaEmaQuadratureInPhase: 0.2, alphaEmaPeriod: 0.2 }
      );
    }).toThrow();
  });

  it('should throw if alpha quad is 0', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 4, alphaEmaQuadratureInPhase: 0, alphaEmaPeriod: 0.2 }
      );
    }).toThrow();
  });

  it('should throw if alpha quad is negative', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 4, alphaEmaQuadratureInPhase: -0.001, alphaEmaPeriod: 0.2 }
      );
    }).toThrow();
  });

  it('should throw if alpha quad is 1', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 4, alphaEmaQuadratureInPhase: 1, alphaEmaPeriod: 0.2 }
      );
    }).toThrow();
  });

  it('should throw if alpha quad is greater than 1', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 4, alphaEmaQuadratureInPhase: 1.001, alphaEmaPeriod: 0.2 }
      );
    }).toThrow();
  });

  it('should throw if alpha period is 0', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 4, alphaEmaQuadratureInPhase: 0.2, alphaEmaPeriod: 0 }
      );
    }).toThrow();
  });

  it('should throw if alpha period is negative', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 4, alphaEmaQuadratureInPhase: 0.2, alphaEmaPeriod: -0.001 }
      );
    }).toThrow();
  });

  it('should throw if alpha period is 1', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 4, alphaEmaQuadratureInPhase: 0.2, alphaEmaPeriod: 1 }
      );
    }).toThrow();
  });

  it('should throw if alpha period is greater than 1', () => {
    expect(() => {
      new HilbertTransformerHomodyneDiscriminatorUnrolled(
        { smoothingLength: 4, alphaEmaQuadratureInPhase: 0.2, alphaEmaPeriod: 1.001 }
      );
    }).toThrow();
  });

  it('should calculate expected output and prime state', () => {
    const lenPrimed = 2 + 7 * 3;
    const hthd = new HilbertTransformerHomodyneDiscriminatorUnrolled(
      { smoothingLength: 4, alphaEmaQuadratureInPhase: 0.2, alphaEmaPeriod: 0.2 }
    );

    for (let i = 0; i < input.length; i++) {
      hthd.update(input[i]);

      if (i < lenPrimed) {
        expect(hthd.primed).withContext(`primed ${i}: expected false, actual true`)
          .toBe(false);
      } else {
        expect(hthd.primed).withContext(`primed ${i}: expected true, actual false`)
          .toBe(true);
      }

      let exp = expectedSmoothed[i];
      if (Number.isNaN(exp)) {
        expect(hthd.primed).withContext(`smoothed ${i} primed: expected false, actual true`)
          .toBe(false);
      } else {
        const act = hthd.smoothedValue;
        expect(act).withContext(`smoothed ${i}: expected ${exp}, actual ${act}`)
          .toBeCloseTo(exp, epsilon);
      }

      exp = expectedDetrended[i];
      if (Number.isNaN(exp)) {
        expect(hthd.primed).withContext(`detrended ${i} primed: expected false, actual true`)
          .toBe(false);
      } else {
        const act = hthd.detrendedValue;
        expect(act).withContext(`detrended ${i}: expected ${exp}, actual ${act}`)
          .toBeCloseTo(exp, epsilon);
      }

      exp = expectedQuadrature[i];
      if (Number.isNaN(exp)) {
        expect(hthd.primed).withContext(`quadrature ${i} primed: expected false, actual true`)
          .toBe(false);
      } else {
        const act = hthd.quadratureValue;
        expect(act).withContext(`quadrature ${i}: expected ${exp}, actual ${act}`)
          .toBeCloseTo(exp, epsilon);
      }

      exp = expectedInPhase[i];
      if (Number.isNaN(exp)) {
        expect(hthd.primed).withContext(`in-phase ${i} primed: expected false, actual true`)
          .toBe(false);
      } else {
        const act = hthd.inPhaseValue;
        expect(act).withContext(`in-phase ${i}: expected ${exp}, actual ${act}`)
          .toBeCloseTo(exp, epsilon);
      }

      exp = expectedPeriod[i];
      if (Number.isNaN(exp)) {
        expect(hthd.primed).withContext(`period ${i} primed: expected false, actual true`)
          .toBe(false);
      } else {
        const act = hthd.periodValue;
        expect(act).withContext(`period ${i}: expected ${exp}, actual ${act}`)
          .toBeCloseTo(exp, epsilon);
      }
    }

    const prevVal = hthd.periodValue;
    hthd.update(Number.NaN);
    const newVal = hthd.periodValue;
    expect(prevVal === newVal).withContext('updating with NaN should not change period')
      .toBeTrue();
  });

  const update = function (omega: number): HilbertTransformerHomodyneDiscriminatorUnrolled {
    const updates = 512;
    const hthd = new HilbertTransformerHomodyneDiscriminatorUnrolled(
      { smoothingLength: 4, alphaEmaQuadratureInPhase: 0.2, alphaEmaPeriod: 0.2 }
    );

    for (let i = 0; i < updates; ++i) {
      hthd.update(Math.sin(omega * i));
    }

    return hthd;
  }

  it('should calculate correct period of sinusoid', () => {
    let period = 30;
    let omega = 2 * Math.PI / period;
    let exp = period;
    let act = update(omega).periodValue;
    expect(act).withContext(
      `period ${period} (omega ${omega}) inside (min,max) -> period expected ${exp} actual ${act}`)
      .toBeCloseTo(exp, 1e-2);

    period = 3;
    omega = 2 * Math.PI / period;
    exp = 6;
    act = update(omega).periodValue;
    expect(act).withContext(
      `period ${period} (omega ${omega}) < min -> period expected ${exp} actual ${act}`)
      .toBeCloseTo(exp, 1e-14);

    period = 60;
    omega = 2 * Math.PI / period;
    exp = 50;
    act = update(omega).periodValue;
    expect(act).withContext(
      `period ${period} (omega ${omega}) < min -> period expected ${exp} actual ${act}`)
      .toBeCloseTo(exp, 1e-14);  
  });
});
