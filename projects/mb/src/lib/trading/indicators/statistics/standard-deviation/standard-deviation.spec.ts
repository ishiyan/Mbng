import { } from 'jasmine';

import { StandardDeviation } from './standard-deviation';

// ng test mb  --code-coverage --include='**/indicators/**/*.spec.ts'
// ng test mb  --code-coverage --include='**/indicators/*.spec.ts'

// Standard deviation input test data.
const input = [
  91.5000, 94.8150, 94.3750, 95.0950, 93.7800, 94.6250, 92.5300, 92.7500, 90.3150, 92.4700,
  96.1250, 97.2500, 98.5000, 89.8750, 91.0000, 92.8150, 89.1550, 89.3450, 91.6250, 89.8750,
  88.3750, 87.6250, 84.7800, 83.0000, 83.5000, 81.3750, 84.4400, 89.2500, 86.3750, 86.2500,
  85.2500, 87.1250, 85.8150, 88.9700, 88.4700, 86.8750, 86.8150, 84.8750, 84.1900, 83.8750,
  83.3750, 85.5000, 89.1900, 89.4400, 91.0950, 90.7500, 91.4400, 89.0000, 91.0000, 90.5000,
  89.0300, 88.8150, 84.2800, 83.5000, 82.6900, 84.7500, 85.6550, 86.1900, 88.9400, 89.2800,
  88.6250, 88.5000, 91.9700, 91.5000, 93.2500, 93.5000, 93.1550, 91.7200, 90.0000, 89.6900,
  88.8750, 85.1900, 83.3750, 84.8750, 85.9400, 97.2500, 99.8750, 104.9400, 106.0000, 102.5000,
  102.4050, 104.5950, 106.1250, 106.0000, 106.0650, 104.6250, 108.6250, 109.3150, 110.5000, 112.7500,
  123.0000, 119.6250, 118.7500, 119.2500, 117.9400, 116.4400, 115.1900, 111.8750, 110.5950, 118.1250,
  116.0000, 116.0000, 112.0000, 113.7500, 112.9400, 116.0000, 120.5000, 116.6200, 117.0000, 115.2500,
  114.3100, 115.5000, 115.8700, 120.6900, 120.1900, 120.7500, 124.7500, 123.3700, 122.9400, 122.5600,
  123.1200, 122.5600, 124.6200, 129.2500, 131.0000, 132.2500, 131.0000, 132.8100, 134.0000, 137.3800,
  137.8100, 137.8800, 137.2500, 136.3100, 136.2500, 134.6300, 128.2500, 129.0000, 123.8700, 124.8100,
  123.0000, 126.2500, 128.3800, 125.3700, 125.6900, 122.2500, 119.3700, 118.5000, 123.1900, 123.5000,
  122.1900, 119.3100, 123.3100, 121.1200, 123.3700, 127.3700, 128.5000, 123.8700, 122.9400, 121.7500,
  124.4400, 122.0000, 122.3700, 122.9400, 124.0000, 123.1900, 124.5600, 127.2500, 125.8700, 128.8600,
  132.0000, 130.7500, 134.7500, 135.0000, 132.3800, 133.3100, 131.9400, 130.0000, 125.3700, 130.1300,
  127.1200, 125.1900, 122.0000, 125.0000, 123.0000, 123.5000, 120.0600, 121.0000, 117.7500, 119.8700,
  122.0000, 119.1900, 116.3700, 113.5000, 114.2500, 110.0000, 105.0600, 107.0000, 107.8700, 107.0000,
  107.1200, 107.0000, 91.0000, 93.9400, 93.8700, 95.5000, 93.0000, 94.9400, 98.2500, 96.7500,
  94.8100, 94.3700, 91.5600, 90.2500, 93.9400, 93.6200, 97.0000, 95.0000, 95.8700, 94.0600,
  94.6200, 93.7500, 98.0000, 103.9400, 107.8700, 106.0600, 104.5000, 105.0000, 104.1900, 103.0600,
  103.4200, 105.2700, 111.8700, 116.0000, 116.6200, 118.2800, 113.3700, 109.0000, 109.7000, 109.2500,
  107.0000, 109.1900, 110.0000, 109.2000, 110.1200, 108.0000, 108.6200, 109.7500, 109.8100, 109.0000,
  108.7500, 107.8700,
];

describe('StandardDeviation', () => {
  const epsilon = 10e-14;

  it('should return expected mnemonic', () => {
    // Sample standard deviation.
    const stdevs = new StandardDeviation({length: 7, unbiased: true});
    expect(stdevs.getMnemonic()).toBe('stdev.s(7)');

    // Population standard deviation.
    const stdevp = new StandardDeviation({length: 7, unbiased: false});
    expect(stdevp.getMnemonic()).toBe('stdev.p(7)');
  });

  it('should throw if length is less than 2', () => {
    expect(() => { new StandardDeviation({length: 1, unbiased: true}); }).toThrow();
  });

  it('should calculate expected Excel (STDEV.P) output of population standard deviation of length 5', () => {
    const expected = [
      Number.NaN, Number.NaN, Number.NaN, Number.NaN,
      1.285646141051260, 0.446246568614257, 0.883942305809604, 1.006356795575010, 1.452008953140440,
      1.367254914052240, 1.865900854815180, 2.542562880245050, 3.062846062080170, 3.197591906419580,
      3.459226792218170, 3.410854145225210, 3.351479374843290, 1.350827894292980, 1.385870123785050,
      1.423985954986920, 1.087363784572580, 1.369358974118910, 2.291995636994100, 2.494532821992930,
      2.169791234197430, 2.091600822336800, 1.204559670585060, 2.661085492801760, 2.670454268471940,
      2.589309946684640, 1.629225582907410, 1.340242515368020, 0.621712152044658, 1.297700273560890,
      1.445321417540060, 1.136685532590260, 1.160971145205600, 1.442585872660620, 1.534428232274160,
      1.281859586694270, 1.197732858362000, 0.748215209682348, 2.103001188777600, 2.580118989504170,
      2.839624975238810, 1.987012833375770, 0.902372428656816, 0.954316509340585, 0.857540669589495,
      0.829322615150461, 1.007603096462090, 0.899702172943914, 2.374253566913190, 2.795009838980890,
      2.709309137031060, 2.122968676170230, 1.019107452627050, 1.304797302265760, 2.034069811977950,
      1.815642035204080, 1.506288816927220, 1.092472425281300, 1.282316653561050, 1.468795424829480,
      1.890884449140140, 1.788055927536940, 0.789848086659707, 0.839261580200119, 1.318847982141990,
      1.565227140066260, 1.543206402267690, 2.161531864211120, 2.655600497062760, 2.444997750510210,
      1.815079612579020, 5.031641282921510, 6.875640042934190, 7.890907045454280, 7.189955771769390,
      3.222045313151260, 2.146139324461480, 1.413713549485890, 1.620836203939190, 1.620836203939190,
      1.434620507311950, 0.713145146516472, 1.295096907571010, 1.759961363212270, 2.161171904314880,
      2.666838202816210, 5.270695020583150, 5.348179690324550, 4.609501057598320, 3.318132004607410,
      1.737663949099480, 1.131266546840310, 1.501820228922220, 2.533567445322900, 2.762992218592010,
      2.810866414470810, 2.753329983855910, 2.820583982085980, 2.797497810544270, 2.105943968865270,
      1.618077872044480, 1.618077872044480, 3.034761275619550, 2.647764339966830, 2.413515278592620,
      1.812706264125550, 2.113978240190750, 0.970002061853479, 0.875045141692701, 2.243065759178720,
      2.610305729220240, 2.390882682190820, 2.817147493476330, 1.787825494840030, 1.694792022638770,
      1.294582558201680, 0.749063415205949, 0.316733326317267, 0.761787371908987, 2.528955515623000,
      3.392179240547290, 3.731555171774900, 2.678153094951820, 1.229461670813690, 1.139638539186880,
      2.172200727373050, 2.628938949462310, 2.139538267944740, 1.452234140901530, 0.562515777556504,
      0.704499822569175, 1.100538050228160, 3.254943317478820, 3.540488101943010, 4.501972900851360,
      3.799728411347310, 2.399438267595150, 2.103830791675030, 1.895082056270910, 1.765258054789720,
      1.724916229850020, 1.971480661837690, 3.104579842748450, 2.963913628970990, 2.610042145253600,
      2.042561137395890, 2.037478834245890, 2.049247666828000, 1.562331590924280, 1.545814995398870,
      1.519315635409570, 2.699122820473350, 2.759728972199990, 2.710591079451120, 2.272610833380850,
      2.603264104926740, 2.288956093943260, 1.038903267874350, 0.957768239189418, 0.957768239189418,
      0.933980727852560, 0.690883492348745, 0.777364779238164, 1.542924495884360, 1.434274729610750,
      1.985654552030640, 2.578615132197900, 2.232797348618990, 2.982848303216240, 2.350092764126550,
      1.643564419181680, 1.569858592357920, 1.227495010173160, 1.641993909854720, 2.829169489443850,
      2.685553946581600, 2.349173471670410, 2.152444192075600, 2.659213417535340, 2.679726851751870,
      1.793503833282770, 1.210196678230440, 1.641881847149790, 1.772167035016730, 2.082156574323840,
      1.864538548810400, 1.413543066199260, 1.464805789174800, 1.911330426692360, 2.954553096493610,
      3.161843765906220, 3.055299657971370, 3.960770632086640, 3.569562438170820, 3.137786480944810,
      1.598469267768390, 0.933209515596579, 0.339199056602463, 6.507092745612280, 7.198239784836290,
      6.999970285651220, 5.562144910014480, 1.471276996353850, 0.876538647179917, 1.790546285355390,
      1.761356295585880, 1.797342482667120, 1.460597138159590, 2.270774317275940, 2.338806533255800,
      1.770407862612460, 1.578827412987250, 2.303420065902010, 2.200149085857590, 1.244822878967120,
      1.223470473693580, 1.029990291216380, 0.744231146889192, 1.549799987095110, 3.845899634675870,
      5.455362866024590, 5.267593758064490, 3.330066665999350, 1.386414079559210, 1.333695617448000,
      0.983268020429832, 0.707152034572480, 0.859334626324342, 3.243660894729910, 5.133827422109160,
      5.421588697051820, 4.672564178264440, 2.305501247017660, 3.238552763195310, 3.666974774933690,
      3.553471542027600, 2.070986238486390, 0.942409677369668, 1.056851929079940, 1.011205221505510,
      1.120578422066030, 0.758218965734834, 0.807722724701986, 0.762375235694340, 0.809864186144813,
      0.686515841040831, 0.500503746239725, 0.714355653718789
    ];
    const len = 5;
    const stdevp = new StandardDeviation({length: len, unbiased: false});

    for (let i = 0; i < len - 1; i++) {
      expect(stdevp.update(input[i])).toBeNaN();
      expect(stdevp.isPrimed()).toBe(false);
    }

    for (let i = len - 1; i < input.length; i++) {
      expect(stdevp.update(input[i])).toBeCloseTo(expected[i], epsilon);
      expect(stdevp.isPrimed()).toBe(true);
    }

    expect(stdevp.update(Number.NaN)).toBeNaN();
  });

  it('should calculate expected Excel (STDEV.S) output of sample standard deviation of length 5', () => {
    const expected = [
      Number.NaN, Number.NaN, Number.NaN, Number.NaN,
      1.437396083200450, 0.498918831073752, 0.988277541989090, 1.125141102262290, 1.623395361580170,
      1.528637465195720, 2.086140575320850, 2.842671718647790, 3.424365999714400, 3.575016433528660,
      3.867533128494180, 3.813450865030250, 3.747067853669050, 1.510271498771000, 1.549449902384710,
      1.592064697177850, 1.215709669287860, 1.530989875864630, 2.562529024225870, 2.788972481040280,
      2.425900348324310, 2.338480810269780, 1.346738653191480, 2.975184027921630, 2.985658637553860,
      2.894936527801600, 1.821529577031350, 1.498436685349100, 0.695095317204770, 1.450873013051110,
      1.615918469477960, 1.270853059956190, 1.298005200297750, 1.612860037325000, 1.715542916979930,
      1.433162586729080, 1.339106045091280, 0.836530035324495, 2.351226807434790, 2.884660725284690,
      3.174797237620070, 2.221547883796340, 1.008883045749110, 1.066958293467930, 0.958759615336399,
      0.927210871377164, 1.126534509014260, 1.005897609103430, 2.654496185719620, 3.124915998871010,
      3.029099701231370, 2.373551137009690, 1.139396770225370, 1.458807732362290, 2.274159185281450,
      2.029949506761190, 1.684082094198500, 1.221421303236520, 1.433673603021270, 1.642163207479690,
      2.114073082937290, 1.999107300772020, 0.883077006834625, 0.938322972115679, 1.474516870028960,
      1.749977142707870, 1.725357209391730, 2.416666091953950, 2.969051616257290, 2.733590587487450,
      2.029320699150330, 5.625545973503370, 7.687199262410210, 8.822302278883900, 8.03861493044666,
      3.602356173395410, 2.399456709340680, 1.580579798681480, 1.812149966200370, 1.812149966200370,
      1.603954488132380, 0.797320512717439, 1.447962361389270, 1.967696622957920, 2.416263644555370,
      2.981615753245210, 5.892816177346790, 5.979446671724730, 5.153578853573500, 3.709784360309910,
      1.942767356118590, 1.264794449703190, 1.679086060927190, 2.832614516661240, 3.089119211037350,
      3.142644189213920, 3.078316504195110, 3.153508760095650, 3.127697635641910, 2.354516935594220,
      1.809066057389830, 1.809066057389830, 3.392966253884650, 2.960290526282850, 2.698392113833720,
      2.026667214912210, 2.363499524010950, 1.084495274309670, 0.978330210102908, 2.507823757762890,
      2.918410526296800, 2.673088101802850, 3.149666649028110, 1.998849669184760, 1.894835085172320,
      1.447387301312260, 0.837478357929325, 0.354118624192516, 0.851704173994705, 2.827458222503030,
      3.792571686863680, 4.172005512939790, 2.994266187231850, 1.374579935834950, 1.274154621700210,
      2.428594243590310, 2.939243099847300, 2.392076503793300, 1.623647129150910, 0.628911758516247,
      0.787654746700608, 1.230438946067620, 3.639137260395660, 3.958386034736880, 5.033358719582780,
      4.248225511904940, 2.682653537078540, 2.352154331671290, 2.118766150380920, 1.973618504169430,
      1.928514972718640, 2.204182388097680, 3.471025784980570, 3.313756176908610, 2.918115830463210,
      2.283652775708250, 2.277970588045420, 2.291128542880120, 1.746739820351040, 1.728273705175190,
      1.698646520027050, 3.017711053099680, 3.085470790657400, 3.030532956428620, 2.540856154921010,
      2.910537751000660, 2.559130711784770, 1.161529164506860, 1.070817444758910, 1.070817444758910,
      1.044222198576530, 0.772431226712125, 0.869120244845326, 1.725042028473510, 1.603567896909890,
      2.220029279086210, 2.882979361702060, 2.496343325746680, 3.334925786280710, 2.627483587008680,
      1.837560883345090, 1.755155263787220, 1.372381142394490, 1.835805000537910, 3.163107649132410,
      3.002540590899650, 2.626455786797100, 2.406505765627830, 2.973090984144280, 2.996025700824340,
      2.005198244563370, 1.353041019333860, 1.835679710624920, 1.981342978890830, 2.327921819993100,
      2.084617470904430, 1.580389192572510, 1.637702659215040, 2.136932380773900, 3.303290783446110,
      3.535048797400110, 3.415928863427930, 4.428276188315270, 3.990892130839920, 3.508151935136220,
      1.787142971337210, 1.043359957061800, 0.379236074233453, 7.275150857542410, 8.04787673861870,
      7.826204699597370, 6.218667059748420, 1.644937688789460, 0.979999999999999, 2.001891605457200,
      1.969256204763620, 2.009489985045960, 1.632997244333250, 2.538802867494830, 2.614865197290290,
      1.979376164350780, 1.765182710089810, 2.575301924046960, 2.459841458305800, 1.391754288658740,
      1.367881573821360, 1.151564153662310, 0.832075717708432, 1.732729061336480, 4.299846508888430,
      6.099281105179530, 5.889348860442890, 3.723127717390310, 1.550058063428600, 1.491117030953640,
      1.099327066891380, 0.790620009865674, 0.960765319940305, 3.626523128286930, 5.739793550294300,
      6.061520436326190, 5.224085565914860, 2.577628755271010, 3.620812063612250, 4.099802434264360,
      3.972901962042360, 2.315433004861080, 1.053646050626110, 1.181596377787270, 1.130561807244520,
      1.252844762929550, 0.847714574606336, 0.903061459702495, 0.852361425687484, 0.905455686381173,
      0.767548044098869, 0.559580199792665, 0.798673900913257,
      ];
    const len = 5;
    const stdevs = new StandardDeviation({length: len, unbiased: true});

    for (let i = 0; i < len - 1; i++) {
      expect(stdevs.update(input[i])).toBeNaN();
      expect(stdevs.isPrimed()).toBe(false);
    }

    for (let i = len - 1; i < input.length; i++) {
      expect(stdevs.update(input[i])).toBeCloseTo(expected[i], epsilon);
      expect(stdevs.isPrimed()).toBe(true);
    }

    expect(stdevs.update(Number.NaN)).toBeNaN();
  });
});
