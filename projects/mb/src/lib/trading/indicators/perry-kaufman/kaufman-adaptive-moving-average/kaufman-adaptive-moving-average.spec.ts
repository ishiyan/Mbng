import { } from 'jasmine';

import { KaufmanAdaptiveMovingAverage } from './kaufman-adaptive-moving-average';

// ng test mb  --code-coverage --include='**/indicators/**/*.spec.ts'
// ng test mb  --code-coverage --include='**/indicators/perry-kaufman/kaufman-adaptive-moving-average/*.spec.ts'

/* eslint-disable max-len */
// Input data is taken from the TA-Lib (http://ta-lib.org/) tests,
//    test_data.c, TA_SREF_close_daily_ref_0_PRIV[252].
//
// Expected data is taken from TA-Lib (http://ta-lib.org/) tests, test_KAMA.xsl, KAMA: J5…J256, ER: G5…G256, 252 entries.
// Efficiency ratio length is 10, fastest length is 2, slowest length is 30.

const input = [
  91.500000, 94.815000, 94.375000, 95.095000, 93.780000, 94.625000, 92.530000, 92.750000, 90.315000, 92.470000, 96.125000,
  97.250000, 98.500000, 89.875000, 91.000000, 92.815000, 89.155000, 89.345000, 91.625000, 89.875000, 88.375000, 87.625000,
  84.780000, 83.000000, 83.500000, 81.375000, 84.440000, 89.250000, 86.375000, 86.250000, 85.250000, 87.125000, 85.815000,
  88.970000, 88.470000, 86.875000, 86.815000, 84.875000, 84.190000, 83.875000, 83.375000, 85.500000, 89.190000, 89.440000,
  91.095000, 90.750000, 91.440000, 89.000000, 91.000000, 90.500000, 89.030000, 88.815000, 84.280000, 83.500000, 82.690000,
  84.750000, 85.655000, 86.190000, 88.940000, 89.280000, 88.625000, 88.500000, 91.970000, 91.500000, 93.250000, 93.500000,
  93.155000, 91.720000, 90.000000, 89.690000, 88.875000, 85.190000, 83.375000, 84.875000, 85.940000, 97.250000, 99.875000,
  104.940000, 106.000000, 102.500000, 102.405000, 104.595000, 106.125000, 106.000000, 106.065000, 104.625000, 108.625000,
  109.315000, 110.500000, 112.750000, 123.000000, 119.625000, 118.750000, 119.250000, 117.940000, 116.440000, 115.190000,
  111.875000, 110.595000, 118.125000, 116.000000, 116.000000, 112.000000, 113.750000, 112.940000, 116.000000, 120.500000,
  116.620000, 117.000000, 115.250000, 114.310000, 115.500000, 115.870000, 120.690000, 120.190000, 120.750000, 124.750000,
  123.370000, 122.940000, 122.560000, 123.120000, 122.560000, 124.620000, 129.250000, 131.000000, 132.250000, 131.000000,
  132.810000, 134.000000, 137.380000, 137.810000, 137.880000, 137.250000, 136.310000, 136.250000, 134.630000, 128.250000,
  129.000000, 123.870000, 124.810000, 123.000000, 126.250000, 128.380000, 125.370000, 125.690000, 122.250000, 119.370000,
  118.500000, 123.190000, 123.500000, 122.190000, 119.310000, 123.310000, 121.120000, 123.370000, 127.370000, 128.500000,
  123.870000, 122.940000, 121.750000, 124.440000, 122.000000, 122.370000, 122.940000, 124.000000, 123.190000, 124.560000,
  127.250000, 125.870000, 128.860000, 132.000000, 130.750000, 134.750000, 135.000000, 132.380000, 133.310000, 131.940000,
  130.000000, 125.370000, 130.130000, 127.120000, 125.190000, 122.000000, 125.000000, 123.000000, 123.500000, 120.060000,
  121.000000, 117.750000, 119.870000, 122.000000, 119.190000, 116.370000, 113.500000, 114.250000, 110.000000, 105.060000,
  107.000000, 107.870000, 107.000000, 107.120000, 107.000000, 91.000000, 93.940000, 93.870000, 95.500000, 93.000000,
  94.940000, 98.250000, 96.750000, 94.810000, 94.370000, 91.560000, 90.250000, 93.940000, 93.620000, 97.000000, 95.000000,
  95.870000, 94.060000, 94.620000, 93.750000, 98.000000, 103.940000, 107.870000, 106.060000, 104.500000, 105.000000,
  104.190000, 103.060000, 103.420000, 105.270000, 111.870000, 116.000000, 116.620000, 118.280000, 113.370000, 109.000000,
  109.700000, 109.250000, 107.000000, 109.190000, 110.000000, 109.200000, 110.120000, 108.000000, 108.620000, 109.750000,
  109.810000, 109.000000, 108.750000, 107.870000
];

const expected = [
  Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN,
  Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN,
  92.6574744421924, 92.7783471257434, 93.0592520064115, 92.9356368995325, 92.9000149644911,
  92.8990048732289, 92.8229942018608, 92.7516051928620, 92.7414384525517, 92.6960363223993,
  92.3934372123882, 91.9139380062599, 90.7658162726830, 90.0740111936089, 89.3620815288014,
  87.6656280861040, 87.4895131032692, 87.4974604839614, 87.4487997113532, 87.4134797590652,
  87.3586513546248, 87.3571985565411, 87.3428271277309, 87.4342339727455, 87.4790967331831,
  87.4478089486627, 87.4341052772180, 87.2779545841798, 87.1866387951289, 87.0799098978843,
  86.9861110535034, 86.9549433796085, 87.0479997922396, 87.0668566957271, 87.2090146571776,
  87.4600776240503, 87.8014795040326, 87.8826076877600, 88.2803844203263, 88.5454141018648,
  88.5859031486005, 88.5965040436874, 88.2719621445720, 87.8163354339468, 86.8611444903465,
  86.6741610056912, 86.5906930013157, 86.5766752991618, 86.6296450514704, 86.6650208354184,
  86.6783504731998, 86.6895963952268, 87.6981988794437, 88.5095835057360, 89.9508715587081,
  90.9585930437125, 91.4794679492180, 91.5092409530174, 91.4856744284233, 91.4717808315536,
  91.4557387469302, 91.1940009725015, 89.4266294004067, 88.8455374050859, 88.3697094609281,
  88.5930899916723, 89.1316678888979, 90.8601116442358, 93.2091460910382, 94.0581656977510,
  94.9201636069605, 96.8889752566530, 99.4062425239817, 101.1201449462390, 102.3769237660390,
  102.6006738368170, 103.3003850710980, 103.6578508957870, 104.0764855627630, 106.4159093020280,
  112.1346727325330, 113.5057358502340, 114.2548283428500, 115.0085673230990, 115.3491682211620,
  115.4744042357010, 115.4586954188130, 115.4033778968360, 115.3819703222920, 115.4596680866820,
  115.4927139908920, 115.5083211482970, 115.3016588863670, 115.2382416224770, 115.1532481002890,
  115.1580191296150, 115.3257950434630, 115.3602912952500, 115.4272550190370, 115.4236654978450,
  115.4094918992810, 115.4100431369950, 115.4265778341240, 115.7744740794160, 116.0930627623780,
  116.3101967717570, 116.6603109196670, 117.3487018143020, 117.8153888221880, 118.4531290804430,
  119.3499419409230, 119.8086689971510, 120.6175024210070, 122.0458817467430, 123.9704416533650,
  125.8138480326600, 126.3738969105690, 127.6872486354350, 129.2393432164220, 131.6880947713340,
  133.5239638088170, 135.0004207395880, 135.6288233403940, 135.7374059656390, 135.8007904215550,
  135.7583248045180, 135.5543718432480, 135.2569852680960, 133.6204824276490, 131.3192797761920,
  128.7932379609940, 128.4062405870340, 128.4039316032540, 128.0791656483760, 127.8414201748350,
  127.1988985844810, 126.5381546649790, 125.6607070438540, 125.6440698902700, 125.6229493897650,
  125.5972771029140, 125.1856884028260, 125.1156207098550, 124.9914050152240, 124.9677440635400,
  125.0508437113440, 125.3554407671800, 125.3059272985400, 125.2940386783170, 125.2530757692210,
  125.2419747210570, 125.1887237516160, 125.1656598262800, 125.1342643444030, 125.1261708430550,
  125.0293527295390, 125.0082100078360, 125.1058124672220, 125.1321388339230, 125.5284397017590,
  126.2554117345480, 126.9803557764160, 128.5646940398630, 129.8559054638140, 130.0995104273400,
  130.5156892070650, 130.6273781337970, 130.6136632314180, 130.5821372483140, 130.5780360175850,
  130.4619826221790, 130.2592097652620, 129.0901503140520, 128.7592330158310, 128.3218396854650,
  127.9194919253990, 127.1326782278630, 126.7107330400510, 126.1909025410680, 125.5077119513560,
  125.3652360592940, 125.0689417277010, 124.6785367307510, 123.1715118076970, 122.3246069304410,
  120.4996045001390, 118.0226226271800, 116.5389084881180, 115.7700047414230, 114.4762055991300,
  112.8691910705370, 111.7330463494810, 105.8813879559000, 103.7386265802100, 101.7705073498860,
  100.9556429673090, 100.0740835866110, 99.5051792798608, 99.4197548401710, 99.2260466472373,
  98.8377738185378, 98.4351675572326, 98.3887252314702, 98.0891751313173, 98.0708172638065,
  98.0047820815841, 97.9717872707032, 97.9587393847739, 97.9160266616328, 97.8272391679346,
  97.8109932013579, 97.7811643727499, 97.7968786191168, 98.8421055702164, 100.3972096134300,
  101.1278312905150, 101.3486183367770, 101.7632588756100, 101.9699249107700, 102.0803180404650,
  102.2131955779830, 102.6495717799380, 104.1660350536590, 105.9174582846280, 107.1295132390960,
  109.3610815395210, 109.7246822740860, 109.7071337912410, 109.7068748325140, 109.6867591775540,
  109.6319778699710, 109.6221417907160, 109.6271816752350, 109.5930223785590, 109.6314010730650,
  109.3937985883840, 109.3445353771140, 109.3487688924230, 109.3510517081720, 109.3489501843720,
  109.3310159853090, 109.2940150671190
];

const expectedEr = [
  Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN,
  Number.NaN, Number.NaN, Number.NaN, Number.NaN, Number.NaN,
  0.2689735388194240, 0.1622792402532490, 0.2608283275371480, 0.2200674536256320, 0.1181470463238420,
  0.0738775510204083, 0.1294839823518130, 0.1307854810831570, 0.0506182380216384, 0.1018645731108930,
  0.3323327615780450, 0.4194813684898670, 0.5590872045639770, 0.3885278327211080, 0.4393673110720560,
  0.6582278481012660, 0.2809055704498070, 0.00443821537024054, 0.2386363636363640, 0.1779141104294480,
  0.1572327044025160, 0.0238095238095238, 0.0531723606473155, 0.2864683301343570, 0.2384836852207290,
  0.2708025603151160, 0.1372435712221900, 0.3030827848978180, 0.1784401796651700, 0.1909931644551670,
  0.1571009635525760, 0.1333606893721790, 0.2317198764160660, 0.0403087478559176, 0.2048380803745610,
  0.3350626891482920, 0.3792537925379260, 0.3249310752264670, 0.4860813704496790, 0.4667136315604090,
  0.3728981206726020, 0.2500943040362130, 0.3482269503546100, 0.4060150375939850, 0.6097207109176640,
  0.3870967741935480, 0.3681196309258670, 0.2034757422157860, 0.1414835164835170, 0.0847222222222221,
  0.0298122929701878, 0.0233419785105593, 0.6186645213193880, 0.660066006600660, 0.8085758039816230,
  0.7777777777777780, 0.7015902712815720, 0.4771354616048320, 0.1003787878787880, 0.0389363722697053,
  0.0233863423760524, 0.2322807017543860, 0.6824136562127830, 0.4862385321100920, 0.5649149922720250,
  0.1562500000000000, 0.2557077625570780, 0.4419926446004680, 0.5470085470085470, 0.3948828606658450,
  0.4265447667087010, 0.6420181968569070, 0.7598530394121580, 0.7395413968142830, 0.730092508615999,
  0.4167844023735520, 0.4588358678552700, 0.2977203130316440, 0.3036437246963560, 0.7553426676492270,
  0.8680716543730240, 0.6033721397029310, 0.520511234796949, 0.5379618351603740, 0.4589371980676330,
  0.4555619818777710, 0.2831572137157640, 0.0991863618752422, 0.00366724570546222, 0.1723585056918390,
  0.3035559410234170, 0.1841503683007370, 0.2959228408592720, 0.2285951787198670, 0.2122241086587440,
  0.0175159235668789, 0.1871695452943250, 0.1639882495247970, 0.2284644194756550, 0.1291844529319250,
  0.0802088277171333, 0.0224618149146451, 0.2077294685990340, 0.3198156682027650, 0.3389434315100520,
  0.2514557967178400, 0.2311038607939100, 0.4247954688483330, 0.3726474278544540, 0.5017158544955390,
  0.6208597603946440, 0.5206489675516220, 0.5737704918032790, 0.5683930942895090, 0.6627835683629680,
  0.6764705882352940, 0.4385964912280700, 0.6430517711171660, 0.716321243523316, 0.8036876355748370,
  0.8022938285090110, 0.8597081930415260, 0.7705918242831000, 0.5559055118110240, 0.4768392370572210,
  0.2091388400702980, 0.1665657177468200, 0.2466019417475730, 0.5224342444559050, 0.741592920353982,
  0.8079650845608300, 0.5406787540678750, 0.3854845719252500, 0.4362041467304630, 0.4167324388318870,
  0.4558173784977910, 0.3753169907016060, 0.4415475189234660, 0.0291345329905744, 0.0576838397181860,
  0.0364700585321928, 0.3177655677655680, 0.2138338253901310, 0.1856705985146350, 0.0934730056406122,
  0.2017336485421590, 0.3863732543377060, 0.1960569550931000, 0.0105797714769361, 0.0713994288045696,
  0.0869061413673233, 0.1056974459724950, 0.0430797433547203, 0.0900990099009898, 0.0331404523934769,
  0.2642225031605570, 0.2453300124533000, 0.2393767705382430, 0.2010981468771450, 0.4343310934636540,
  0.4494649227110590, 0.5598208573256560, 0.6427829698857740, 0.6367476240760300, 0.4087804878048780,
  0.4907856450048500, 0.3579049466537340, 0.1383995973829890, 0.0216262975778547, 0.0510245078344710,
  0.1970920840064620, 0.2185534591194970, 0.5176613885505480, 0.3652300949598250, 0.3505231689088190,
  0.3725788074439810, 0.4183098591549300, 0.3284671532846720, 0.2928516525749430, 0.4388366124893070,
  0.2275555555555560, 0.2566295979469630, 0.2446762277270750, 0.5026223776223780, 0.4045307443365700,
  0.5319148936170210, 0.5580357142857140, 0.5021520803443330, 0.3874509803921570, 0.5307216494845360,
  0.6690647482014380, 0.6235294117647050, 0.775129850290253, 0.5963414634146340, 0.6344956413449560,
  0.4915254237288140, 0.4456762749445680, 0.4456762749445680, 0.3261016949152540, 0.3401924991702620,
  0.3852895148669800, 0.3913851874806320, 0.0293501048218031, 0.2114613180515760, 0.0033222591362123,
  0.0951417004048581, 0.1937984496124030, 0.00289855072463779, 0.1303395399780940, 0.1448572967151320,
  0.0110529377545083, 0.0351872871736665, 0.3378803777544590, 0.5778809624314060, 0.5821145006268280,
  0.4893784421715180, 0.3177966101694910, 0.4524886877828050, 0.3774954627949180, 0.4213483146067410,
  0.4158790170132320, 0.5203252032520320, 0.5663536137198860, 0.5317460317460320, 0.4517294785751160,
  0.6357960457856400, 0.3929995569339830, 0.1512859304084720, 0.2092669958222560, 0.2413255360623780,
  0.1299927378358750, 0.1406025824964130, 0.0846536894522410, 0.3624733475479740, 0.3410283315844700,
  0.5266393442622950, 0.3118844386080100, 0.0625521267723102, 0.00969162995594708, 0.0213492741246797,
  0.1802265705458290, 0.1571428571428560,
];

describe('KaufmanAdaptiveMovingAverage', () => {
  const epsilon = 1e-8;

  it('should return expected mnemonic', () => {
    let kama = new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestLength: 2, slowestLength: 30 });
    expect(kama.getMnemonic()).toBe('kama(10, 2, 30)');
    kama = new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestSmoothingFactor: 2 / 3, slowestSmoothingFactor: 2 / 31 });
    expect(kama.getMnemonic()).toBe('kama(10, 0.667, 0.065)');
  });

  it('should throw if efficiency ratio length is less than 2', () => {
    expect(() => { new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 1, fastestLength: 2, slowestLength: 30 }); }).toThrow();
  });

  it('should throw if the fastest length is less than 2', () => {
    expect(() => { new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestLength: 1, slowestLength: 30 }); }).toThrow();
  });

  it('should throw if the slowest length is less than 2', () => {
    expect(() => { new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestLength: 2, slowestLength: 1 }); }).toThrow();
  });

  it('should throw if the fastest smoothing factor is less or equal to 0', () => {
    expect(() => { new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestSmoothingFactor: -0.01, slowestSmoothingFactor: 2 / 31 }); }).toThrow();
  });

  it('should throw if the fastest smoothing factor is greater or equal to 1', () => {
    expect(() => { new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestSmoothingFactor: 1.01, slowestSmoothingFactor: 2 / 31 }); }).toThrow();
  });

  it('should throw if the slowest smoothing factor is less or equal to 0', () => {
    expect(() => { new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestSmoothingFactor: 2 / 3, slowestSmoothingFactor: -0.01 }); }).toThrow();
  });

  it('should throw if the slowest smoothing factor is greater or equal to 1', () => {
    expect(() => { new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestSmoothingFactor: 2 / 3, slowestSmoothingFactor: 1.01 }); }).toThrow();
  });

  it('should calculate expected output and prime state', () => {
    const len = 10;
    const kama = new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestLength: 2, slowestLength: 30 });

    for (let i = 0; i < len; i++) {
      expect(kama.update(input[i])).toBeNaN();
      expect(kama.isPrimed()).toBe(false);
    }

    for (let i = len; i < input.length; i++) {
      const act = kama.update(input[i]);
      expect(kama.isPrimed()).toBe(true);
      expect(act).withContext(`{i}: expected {expected[i]}, actual {act}`).toBeCloseTo(expected[i], epsilon);
    }

    expect(kama.update(Number.NaN)).toBeNaN();
  });

  it('should calculate expected KAMA and ER outputs', () => {
    const len = 10;
    const kama = new KaufmanAdaptiveMovingAverage({ efficiencyRatioLength: 10, fastestLength: 2, slowestLength: 30 });

    for (let i = 0; i < len; i++) {
      expect(kama.update(input[i])).toBeNaN();
      expect(kama.isPrimed()).toBe(false);
    }

    for (let i = len; i < input.length; i++) {
      kama.update(input[i]);
      expect(kama.isPrimed()).toBe(true);
      const actKama = kama.getKama();
      const actEr = kama.getEfficiencyRatio();
      expect(actKama).withContext(`{i}: expected {expected[i]}, actual {actKama}`).toBeCloseTo(expected[i], epsilon);
      expect(actEr).withContext(`{i}: expected {expectedEr[i]}, actual {actEr}`).toBeCloseTo(expectedEr[i], epsilon);
    }

    expect(kama.update(Number.NaN)).toBeNaN();
  });
});
